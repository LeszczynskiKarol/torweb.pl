---
// src/components/ui/Button.astro

export interface Props {
  href?: string;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'white';
  size?: 'sm' | 'md' | 'lg';
  fullWidth?: boolean;
  class?: string;
  target?: string;
  rel?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
}

const { 
  href, 
  variant = 'primary', 
  size = 'md', 
  fullWidth = false,
  class: className = '',
  target,
  rel,
  type = 'button',
  disabled = false
} = Astro.props;

const Component = href ? 'a' : 'button';

const classes = [
  'button',
  `button-${variant}`,
  `button-${size}`,
  fullWidth && 'button-full',
  className
].filter(Boolean).join(' ');

const attrs = {
  class: classes,
  href,
  target,
  rel: target === '_blank' ? 'noopener noreferrer' : rel,
  type: !href ? type : undefined,
  disabled: !href ? disabled : undefined
};
---

<Component {...attrs}>
  <slot />
</Component>

<style>
  .button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-family: inherit;
    font-weight: 600;
    text-decoration: none;
    border-radius: var(--radius-lg);
    transition: all var(--transition-fast);
    cursor: pointer;
    outline: none;
    position: relative;
    overflow: hidden;
    border: 2px solid transparent;
    white-space: nowrap;
  }

  .button:focus-visible {
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.2);
  }

  .button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Sizes */
  .button-sm {
    padding: 0.5rem 1rem;
    font-size: var(--text-sm);
  }

  .button-md {
    padding: 0.75rem 1.5rem;
    font-size: var(--text-base);
  }

  .button-lg {
    padding: 1rem 2rem;
    font-size: var(--text-lg);
  }

  /* Full width */
  .button-full {
    width: 100%;
  }

  /* Primary variant */
  .button-primary {
    background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-primary-dark) 100%);
    color: white;
    border-color: var(--color-primary);
    box-shadow: 0 4px 14px 0 rgba(37, 99, 235, 0.3);
  }

  .button-primary::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, transparent 0%, rgba(255, 255, 255, 0.15) 100%);
    opacity: 0;
    transition: opacity var(--transition-fast);
  }

  .button-primary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 7px 20px 0 rgba(37, 99, 235, 0.4);
  }

  .button-primary:hover:not(:disabled)::before {
    opacity: 1;
  }

  .button-primary:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: 0 2px 8px 0 rgba(37, 99, 235, 0.3);
  }

  /* Secondary variant */
  .button-secondary {
    background: linear-gradient(135deg, var(--color-secondary) 0%, #6d28d9 100%);
    color: white;
    border-color: var(--color-secondary);
    box-shadow: 0 4px 14px 0 rgba(124, 58, 237, 0.3);
  }

  .button-secondary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 7px 20px 0 rgba(124, 58, 237, 0.4);
  }

  .button-secondary:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: 0 2px 8px 0 rgba(124, 58, 237, 0.3);
  }

  /* Outline variant */
  .button-outline {
    background: transparent;
    color: var(--color-primary);
    border-color: var(--color-primary);
  }

  .button-outline:hover:not(:disabled) {
    background: var(--color-primary);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 14px 0 rgba(37, 99, 235, 0.3);
  }

  .button-outline:active:not(:disabled) {
    transform: translateY(0);
  }

  /* Ghost variant */
  .button-ghost {
    background: transparent;
    color: var(--color-gray-700);
    border-color: transparent;
  }

  .button-ghost:hover:not(:disabled) {
    background: var(--color-gray-100);
    color: var(--color-primary);
  }

  .button-ghost:active:not(:disabled) {
    background: var(--color-gray-200);
  }

  /* White variant */
  .button-white {
    background: white;
    color: var(--color-primary);
    border-color: white;
    box-shadow: 0 4px 14px 0 rgba(0, 0, 0, 0.1);
  }

  .button-white:hover:not(:disabled) {
    background: var(--color-gray-100);
    transform: translateY(-2px);
    box-shadow: 0 7px 20px 0 rgba(0, 0, 0, 0.15);
  }

  .button-white:active:not(:disabled) {
    transform: translateY(0);
    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.1);
  }

  /* Loading state animation */
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .button.loading {
    color: transparent;
    pointer-events: none;
  }

  .button.loading::after {
    content: '';
    position: absolute;
    width: 1rem;
    height: 1rem;
    margin: auto;
    border: 2px solid transparent;
    border-top-color: currentColor;
    border-radius: 50%;
    animation: spin 0.6s linear infinite;
  }

  /* Ripple effect */
  @keyframes ripple {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }

  .button::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    transform: translate(-50%, -50%);
    pointer-events: none;
  }

  .button:not(:disabled):active::after {
    width: 100%;
    height: 100%;
    animation: ripple 0.6s ease-out;
  }
</style>

<script>
  // Add ripple effect on click
  document.querySelectorAll('.button').forEach(button => {
    button.addEventListener('click', function(e) {
      const rect = this.getBoundingClientRect();
      const ripple = document.createElement('span');
      const size = Math.max(rect.width, rect.height);
      const x = e.clientX - rect.left - size / 2;
      const y = e.clientY - rect.top - size / 2;
      
      ripple.style.width = ripple.style.height = size + 'px';
      ripple.style.left = x + 'px';
      ripple.style.top = y + 'px';
      ripple.classList.add('ripple');
      
      this.appendChild(ripple);
      
      setTimeout(() => {
        ripple.remove();
      }, 600);
    });
  });
</script>

<style>
  .button {
    position: relative;
    overflow: hidden;
  }

  .button .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.7);
    transform: scale(0);
    animation: ripple-animation 0.6s ease-out;
    pointer-events: none;
  }

  @keyframes ripple-animation {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }
</style>